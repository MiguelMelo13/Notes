/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoCorrectPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AutoCorrectPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading AutoCorrectPlugin");
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        const punctuation = [" ", ".", ",", ";", ":", "!", "?", "\n"];
        const doc = editor.getDoc();
        const cursor = doc.getCursor();
        const line = doc.getLine(cursor.line);
        const lineUpToCursor = line.substring(0, cursor.ch);
        const lastChar = lineUpToCursor.slice(-1);
        let lastWordMatch;
        if (punctuation.includes(lastChar)) {
          if (lineUpToCursor.length > 0) {
            lastWordMatch = lineUpToCursor.match(/\b\w+\W*$/);
          }
          if (lastWordMatch) {
            const lastWord = lastWordMatch[0];
            if (/\b[A-Z]{2}[a-z]+\b/.test(lastWord)) {
              let uppercaseCount = 0;
              for (let i = 0; i < lastWord.length; i++) {
                const char = lastWord[i];
                if (char === char.toUpperCase() && char !== char.toLowerCase()) {
                  uppercaseCount++;
                  if (uppercaseCount === 2) {
                    const start = cursor.ch - lastWord.length + i;
                    const end = start + 1;
                    doc.replaceRange(char.toLowerCase(), { line: cursor.line, ch: start }, { line: cursor.line, ch: end });
                    return;
                  }
                }
              }
            }
          }
        }
      })
    );
  }
  onunload() {
    console.log("Unloading AutoCorrectPlugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0NvcnJlY3RQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ0xvYWRpbmcgQXV0b0NvcnJlY3RQbHVnaW4nKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignZWRpdG9yLWNoYW5nZScsIChlZGl0b3I6IEVkaXRvcikgPT4ge1xuXHRcdFx0XHRjb25zdCBwdW5jdHVhdGlvbiA9IFsnICcsICcuJywgJywnLCAnOycsICc6JywgJyEnLCAnPycsICdcXG4nXTtcblx0XHRcdFx0Y29uc3QgZG9jID0gZWRpdG9yLmdldERvYygpO1xuXHRcdFx0XHRjb25zdCBjdXJzb3IgPSBkb2MuZ2V0Q3Vyc29yKCk7XG5cdFx0XHRcdGNvbnN0IGxpbmUgPSBkb2MuZ2V0TGluZShjdXJzb3IubGluZSk7XG5cdFx0XHRcdGNvbnN0IGxpbmVVcFRvQ3Vyc29yID0gbGluZS5zdWJzdHJpbmcoMCwgY3Vyc29yLmNoKTsgXG5cdFx0XHRcdGNvbnN0IGxhc3RDaGFyID0gbGluZVVwVG9DdXJzb3Iuc2xpY2UoLTEpO1xuXHRcdFx0XHRsZXQgbGFzdFdvcmRNYXRjaDtcblxuXHRcdFx0XHRpZiAocHVuY3R1YXRpb24uaW5jbHVkZXMobGFzdENoYXIpKSB7XG5cdFx0XHRcdFx0aWYgKGxpbmVVcFRvQ3Vyc29yLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdGxhc3RXb3JkTWF0Y2ggPSBsaW5lVXBUb0N1cnNvci5tYXRjaCgvXFxiXFx3K1xcVyokLyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChsYXN0V29yZE1hdGNoKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBsYXN0V29yZCA9IGxhc3RXb3JkTWF0Y2hbMF07XG5cdFx0XHRcdFx0XHRpZiAoL1xcYltBLVpdezJ9W2Etel0rXFxiLy50ZXN0KGxhc3RXb3JkKSkge1xuXHRcdFx0XHRcdFx0XHRsZXQgdXBwZXJjYXNlQ291bnQgPSAwO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RXb3JkLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgY2hhciA9IGxhc3RXb3JkW2ldO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjaGFyID09PSBjaGFyLnRvVXBwZXJDYXNlKCkgJiYgY2hhciAhPT0gY2hhci50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1cHBlcmNhc2VDb3VudCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodXBwZXJjYXNlQ291bnQgPT09IDIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBjdXJzb3IuY2ggLSBsYXN0V29yZC5sZW5ndGggKyBpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBlbmQgPSBzdGFydCArIDE7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRvYy5yZXBsYWNlUmFuZ2UoY2hhci50b0xvd2VyQ2FzZSgpLCB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogc3RhcnQgfSwgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGVuZCB9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuOyBcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgQXV0b0NvcnJlY3RQbHVnaW4nKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2QztBQUU3QyxJQUFxQixvQkFBckIsY0FBK0MsdUJBQU87QUFBQSxFQUNyRCxNQUFNLFNBQVM7QUFDZCxZQUFRLElBQUksMkJBQTJCO0FBRXZDLFNBQUs7QUFBQSxNQUNKLEtBQUssSUFBSSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsV0FBbUI7QUFDMUQsY0FBTSxjQUFjLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJO0FBQzVELGNBQU0sTUFBTSxPQUFPLE9BQU87QUFDMUIsY0FBTSxTQUFTLElBQUksVUFBVTtBQUM3QixjQUFNLE9BQU8sSUFBSSxRQUFRLE9BQU8sSUFBSTtBQUNwQyxjQUFNLGlCQUFpQixLQUFLLFVBQVUsR0FBRyxPQUFPLEVBQUU7QUFDbEQsY0FBTSxXQUFXLGVBQWUsTUFBTSxFQUFFO0FBQ3hDLFlBQUk7QUFFSixZQUFJLFlBQVksU0FBUyxRQUFRLEdBQUc7QUFDbkMsY0FBSSxlQUFlLFNBQVMsR0FBRztBQUM5Qiw0QkFBZ0IsZUFBZSxNQUFNLFdBQVc7QUFBQSxVQUNqRDtBQUNBLGNBQUksZUFBZTtBQUNsQixrQkFBTSxXQUFXLGNBQWMsQ0FBQztBQUNoQyxnQkFBSSxxQkFBcUIsS0FBSyxRQUFRLEdBQUc7QUFDeEMsa0JBQUksaUJBQWlCO0FBQ3JCLHVCQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsUUFBUSxLQUFLO0FBQ3pDLHNCQUFNLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLG9CQUFJLFNBQVMsS0FBSyxZQUFZLEtBQUssU0FBUyxLQUFLLFlBQVksR0FBRztBQUMvRDtBQUVBLHNCQUFJLG1CQUFtQixHQUFHO0FBQ3pCLDBCQUFNLFFBQVEsT0FBTyxLQUFLLFNBQVMsU0FBUztBQUM1QywwQkFBTSxNQUFNLFFBQVE7QUFDcEIsd0JBQUksYUFBYSxLQUFLLFlBQVksR0FBRyxFQUFFLE1BQU0sT0FBTyxNQUFNLElBQUksTUFBTSxHQUFHLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxJQUFJLENBQUM7QUFDckc7QUFBQSxrQkFDRDtBQUFBLGdCQUNEO0FBQUEsY0FDRDtBQUFBLFlBQ0Q7QUFBQSxVQUNEO0FBQUEsUUFDRDtBQUFBLE1BQ0QsQ0FBQztBQUFBLElBQ0Y7QUFBQSxFQUNEO0FBQUEsRUFFQSxXQUFXO0FBQ1YsWUFBUSxJQUFJLDZCQUE2QjtBQUFBLEVBQzFDO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
